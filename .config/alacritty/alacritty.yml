window:
  dimensions:
    columns: 120
    lines: 80
  padding:
    x: 8
    y: 8

background_opacity: 0.95
unfocused_hollow: true

dpi:
  x: 96
  y: 96

cursor:
  style:
    shape: Beam
    blinking: Always

font:
  normal:
    family: Meslo LG M DZ
    style: Medium
  size: 6

colors:
  primary:
    background: "0x2c2e34"
    foreground: "0xe2e2e3"

  # cursor:
  #   cursor: "0xe7c664"

  normal:
    black: "0x707070"
    red: "0xfc5d7c"
    green: "0x9ed072"
    yellow: "0xe7c664"
    blue: "0x76cce0"
    magenta: "0xb39df3"
    cyan: "0xf39660"
    white: "0xe2e2e3"

  bright:
    black: "0x505050"
    red: "0xfc5d7c"
    green: "0x9ed072"
    yellow: "0xe7c664"
    blue: "0x76cce0"
    magenta: "0xb39df3"
    cyan: "0xf39660"
    white: "0xe2e2e3"

# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Possible values for `animation`
# `Ease`
# `EaseOut`
# `EaseOutSine`
# `EaseOutQuad`
# `EaseOutCubic`
# `EaseOutQuart`
# `EaseOutQuint`
# `EaseOutExpo`
# `EaseOutCirc`
# `Linear`
#
# To completely disable the visual bell, set its duration to 0.
#
#visual_bell:
 # animation: EaseOutExpo
  #duration: 0
# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action` or `chars` field must be present. `chars` writes the
# specified string every time that binding is activated. These should generally
# be escape sequences, but they can be configured to send arbitrary strings of
# bytes. Possible values of `action` include `Paste` and `PasteSelection`.
key_bindings:
# - { key: Up,   mods: Control|Shift,   action: ScrollPageUp                 }
# - { key: Down, mods: Control|Shift,   action: ScrollPageDown               }
  - { key: Space,  mods: Control, action: ToggleViMode}
  # - { key: V, mods: Control, action: Paste}
#  - { key: C,        mods: Control|Shift, action: Copy                         }
#  - { key: W, mods: Control, action: Quit}
#  - { key: W,        mods: Control|Shift, action: Quit                         }
#  - { key: Home,                    chars: "\x1bOH",   mode: AppCursor   }
#  - { key: Home,                    chars: "\x1b[1~",  mode: ~AppCursor  }
#  - { key: End,                     chars: "\x1bOF",   mode: AppCursor   }
#  - { key: End,                     chars: "\x1b[4~",  mode: ~AppCursor  }
#  - { key: PageUp,                  chars: "\x1b[5~"                     }
#  - { key: PageDown,                chars: "\x1b[6~"                     }
#  - { key: Left,     mods: Shift,   chars: "\x1b[1;2D"                   }
#  - { key: Left,     mods: Control, chars: "\x1b[1;5D"                   }
#  - { key: Left,     mods: Alt,     chars: "\x1b[1;3D"                   }
#  - { key: Left,                    chars: "\x1b[D",   mode: ~AppCursor  }
#  - { key: Left,                    chars: "\x1bOD",   mode: AppCursor   }
#  - { key: Right,    mods: Shift,   chars: "\x1b[1;2C"                   }
#  - { key: Right,    mods: Control, chars: "\x1b[1;5C"                   }
#  - { key: Right,    mods: Alt,     chars: "\x1b[1;3C"                   }
#  - { key: Right,                   chars: "\x1b[C",   mode: ~AppCursor  }
#  - { key: Right,                   chars: "\x1bOC",   mode: AppCursor   }
#  - { key: Up,       mods: Shift,   chars: "\x1b[1;2A"                   }
#  - { key: Up,       mods: Control, chars: "\x1b[1;5A"                   }
#  - { key: Up,       mods: Alt,     chars: "\x1b[1;3A"                   }
#  - { key: Up,                      chars: "\x1b[A",   mode: ~AppCursor  }
#  - { key: Up,                      chars: "\x1bOA",   mode: AppCursor   }
#  - { key: Down,     mods: Shift,   chars: "\x1b[1;2B"                   }
#  - { key: Down,     mods: Control, chars: "\x1b[1;5B"                   }
#  - { key: Down,     mods: Alt,     chars: "\x1b[1;3B"                   }
#  - { key: Down,                    chars: "\x1b[B",   mode: ~AppCursor  }
#  - { key: Down,                    chars: "\x1bOB",   mode: AppCursor   }
#  - { key: Tab,      mods: Shift,   chars: "\x1b[Z"                      }
#  - { key: F1,                      chars: "\x1bOP"                      }
#  - { key: F2,                      chars: "\x1bOQ"                      }
#  - { key: F3,                      chars: "\x1bOR"                      }
#  - { key: F4,                      chars: "\x1bOS"                      }
#  - { key: F5,                      chars: "\x1b[15~"                    }
#  - { key: F6,                      chars: "\x1b[17~"                    }
#  - { key: F7,                      chars: "\x1b[18~"                    }
#  - { key: F8,                      chars: "\x1b[19~"                    }
#  - { key: F9,                      chars: "\x1b[20~"                    }
#  - { key: F10,                     chars: "\x1b[21~"                    }
#  - { key: F11,                     chars: "\x1b[23~"                    }
#  - { key: F12,                     chars: "\x1b[24~"                    }
#  - { key: Back,                    chars: "\x7f"                        }
#  - { key: Back,     mods: Alt,     chars: "\x1b\x7f"                    }
#  - { key: Insert,                  chars: "\x1b[2~"                     }
#  - { key: Delete,                  chars: "\x1b[3~",  mode: AppKeypad   }
#  - { key: Delete,                  chars: "\x1b[P",   mode: ~AppKeypad  }

# Mouse bindings
#
# Currently doesn't support modifiers. Both the `mouse` and `action` fields must
# be specified.
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# Values for `action`:
# - Paste
# - PasteSelection
# - Copy (TODO)
# mouse_bindings:
        #  - { mouse: Middle, action: PasteSelection }

mouse:
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

selection:
  semantic_escape_chars: ",â”‚`|:\"' ()[]{}<>"
  save_to_clipboard: true
# hide_cursor_when_typing: false

# Shell
#
# You can set shell.program to the path of your favorite shell, e.g. /bin/fish.
# Entries in shell.args are passed unmodified as arguments to the shell.
# shell:
#   program: /bin/zsh
#   args:
#     - --login
